
/**
 * Client
**/

import * as runtime from './runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model PostcodeMedianPrice
 * 
 */
export type PostcodeMedianPrice = $Result.DefaultSelection<Prisma.$PostcodeMedianPricePayload>
/**
 * Model ContactSubmission
 * 
 */
export type ContactSubmission = $Result.DefaultSelection<Prisma.$ContactSubmissionPayload>
/**
 * Model CMARequest
 * 
 */
export type CMARequest = $Result.DefaultSelection<Prisma.$CMARequestPayload>

/**
 * ##  Prisma Client ʲˢ
 *
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more PostcodeMedianPrices
 * const postcodeMedianPrices = await prisma.postcodeMedianPrice.findMany()
 * ```
 *
 *
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   *
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more PostcodeMedianPrices
   * const postcodeMedianPrices = await prisma.postcodeMedianPrice.findMany()
   * ```
   *
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): PrismaClient;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb<ClientOptions>, ExtArgs, $Utils.Call<Prisma.TypeMapCb<ClientOptions>, {
    extArgs: ExtArgs
  }>>

      /**
   * `prisma.postcodeMedianPrice`: Exposes CRUD operations for the **PostcodeMedianPrice** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more PostcodeMedianPrices
    * const postcodeMedianPrices = await prisma.postcodeMedianPrice.findMany()
    * ```
    */
  get postcodeMedianPrice(): Prisma.PostcodeMedianPriceDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.contactSubmission`: Exposes CRUD operations for the **ContactSubmission** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ContactSubmissions
    * const contactSubmissions = await prisma.contactSubmission.findMany()
    * ```
    */
  get contactSubmission(): Prisma.ContactSubmissionDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.cMARequest`: Exposes CRUD operations for the **CMARequest** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more CMARequests
    * const cMARequests = await prisma.cMARequest.findMany()
    * ```
    */
  get cMARequest(): Prisma.CMARequestDelegate<ExtArgs, ClientOptions>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 6.7.0
   * Query Engine version: 3cff47a7f5d65c3ea74883f1d736e41d68ce91ed
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? P : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    PostcodeMedianPrice: 'PostcodeMedianPrice',
    ContactSubmission: 'ContactSubmission',
    CMARequest: 'CMARequest'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb<ClientOptions = {}> extends $Utils.Fn<{extArgs: $Extensions.InternalArgs }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], ClientOptions extends { omit: infer OmitOptions } ? OmitOptions : {}>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> = {
    globalOmitOptions: {
      omit: GlobalOmitOptions
    }
    meta: {
      modelProps: "postcodeMedianPrice" | "contactSubmission" | "cMARequest"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      PostcodeMedianPrice: {
        payload: Prisma.$PostcodeMedianPricePayload<ExtArgs>
        fields: Prisma.PostcodeMedianPriceFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PostcodeMedianPriceFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PostcodeMedianPricePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PostcodeMedianPriceFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PostcodeMedianPricePayload>
          }
          findFirst: {
            args: Prisma.PostcodeMedianPriceFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PostcodeMedianPricePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PostcodeMedianPriceFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PostcodeMedianPricePayload>
          }
          findMany: {
            args: Prisma.PostcodeMedianPriceFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PostcodeMedianPricePayload>[]
          }
          create: {
            args: Prisma.PostcodeMedianPriceCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PostcodeMedianPricePayload>
          }
          createMany: {
            args: Prisma.PostcodeMedianPriceCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PostcodeMedianPriceCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PostcodeMedianPricePayload>[]
          }
          delete: {
            args: Prisma.PostcodeMedianPriceDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PostcodeMedianPricePayload>
          }
          update: {
            args: Prisma.PostcodeMedianPriceUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PostcodeMedianPricePayload>
          }
          deleteMany: {
            args: Prisma.PostcodeMedianPriceDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PostcodeMedianPriceUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.PostcodeMedianPriceUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PostcodeMedianPricePayload>[]
          }
          upsert: {
            args: Prisma.PostcodeMedianPriceUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PostcodeMedianPricePayload>
          }
          aggregate: {
            args: Prisma.PostcodeMedianPriceAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePostcodeMedianPrice>
          }
          groupBy: {
            args: Prisma.PostcodeMedianPriceGroupByArgs<ExtArgs>
            result: $Utils.Optional<PostcodeMedianPriceGroupByOutputType>[]
          }
          count: {
            args: Prisma.PostcodeMedianPriceCountArgs<ExtArgs>
            result: $Utils.Optional<PostcodeMedianPriceCountAggregateOutputType> | number
          }
        }
      }
      ContactSubmission: {
        payload: Prisma.$ContactSubmissionPayload<ExtArgs>
        fields: Prisma.ContactSubmissionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ContactSubmissionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContactSubmissionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ContactSubmissionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContactSubmissionPayload>
          }
          findFirst: {
            args: Prisma.ContactSubmissionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContactSubmissionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ContactSubmissionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContactSubmissionPayload>
          }
          findMany: {
            args: Prisma.ContactSubmissionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContactSubmissionPayload>[]
          }
          create: {
            args: Prisma.ContactSubmissionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContactSubmissionPayload>
          }
          createMany: {
            args: Prisma.ContactSubmissionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ContactSubmissionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContactSubmissionPayload>[]
          }
          delete: {
            args: Prisma.ContactSubmissionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContactSubmissionPayload>
          }
          update: {
            args: Prisma.ContactSubmissionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContactSubmissionPayload>
          }
          deleteMany: {
            args: Prisma.ContactSubmissionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ContactSubmissionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ContactSubmissionUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContactSubmissionPayload>[]
          }
          upsert: {
            args: Prisma.ContactSubmissionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContactSubmissionPayload>
          }
          aggregate: {
            args: Prisma.ContactSubmissionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateContactSubmission>
          }
          groupBy: {
            args: Prisma.ContactSubmissionGroupByArgs<ExtArgs>
            result: $Utils.Optional<ContactSubmissionGroupByOutputType>[]
          }
          count: {
            args: Prisma.ContactSubmissionCountArgs<ExtArgs>
            result: $Utils.Optional<ContactSubmissionCountAggregateOutputType> | number
          }
        }
      }
      CMARequest: {
        payload: Prisma.$CMARequestPayload<ExtArgs>
        fields: Prisma.CMARequestFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CMARequestFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CMARequestPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CMARequestFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CMARequestPayload>
          }
          findFirst: {
            args: Prisma.CMARequestFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CMARequestPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CMARequestFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CMARequestPayload>
          }
          findMany: {
            args: Prisma.CMARequestFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CMARequestPayload>[]
          }
          create: {
            args: Prisma.CMARequestCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CMARequestPayload>
          }
          createMany: {
            args: Prisma.CMARequestCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CMARequestCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CMARequestPayload>[]
          }
          delete: {
            args: Prisma.CMARequestDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CMARequestPayload>
          }
          update: {
            args: Prisma.CMARequestUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CMARequestPayload>
          }
          deleteMany: {
            args: Prisma.CMARequestDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CMARequestUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.CMARequestUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CMARequestPayload>[]
          }
          upsert: {
            args: Prisma.CMARequestUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CMARequestPayload>
          }
          aggregate: {
            args: Prisma.CMARequestAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCMARequest>
          }
          groupBy: {
            args: Prisma.CMARequestGroupByArgs<ExtArgs>
            result: $Utils.Optional<CMARequestGroupByOutputType>[]
          }
          count: {
            args: Prisma.CMARequestCountArgs<ExtArgs>
            result: $Utils.Optional<CMARequestCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
    /**
     * Global configuration for omitting model fields by default.
     * 
     * @example
     * ```
     * const prisma = new PrismaClient({
     *   omit: {
     *     user: {
     *       password: true
     *     }
     *   }
     * })
     * ```
     */
    omit?: Prisma.GlobalOmitConfig
  }
  export type GlobalOmitConfig = {
    postcodeMedianPrice?: PostcodeMedianPriceOmit
    contactSubmission?: ContactSubmissionOmit
    cMARequest?: CMARequestOmit
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'updateManyAndReturn'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */



  /**
   * Models
   */

  /**
   * Model PostcodeMedianPrice
   */

  export type AggregatePostcodeMedianPrice = {
    _count: PostcodeMedianPriceCountAggregateOutputType | null
    _avg: PostcodeMedianPriceAvgAggregateOutputType | null
    _sum: PostcodeMedianPriceSumAggregateOutputType | null
    _min: PostcodeMedianPriceMinAggregateOutputType | null
    _max: PostcodeMedianPriceMaxAggregateOutputType | null
  }

  export type PostcodeMedianPriceAvgAggregateOutputType = {
    id: number | null
    median: number | null
  }

  export type PostcodeMedianPriceSumAggregateOutputType = {
    id: number | null
    median: number | null
  }

  export type PostcodeMedianPriceMinAggregateOutputType = {
    id: number | null
    postcode: string | null
    median: number | null
  }

  export type PostcodeMedianPriceMaxAggregateOutputType = {
    id: number | null
    postcode: string | null
    median: number | null
  }

  export type PostcodeMedianPriceCountAggregateOutputType = {
    id: number
    postcode: number
    median: number
    _all: number
  }


  export type PostcodeMedianPriceAvgAggregateInputType = {
    id?: true
    median?: true
  }

  export type PostcodeMedianPriceSumAggregateInputType = {
    id?: true
    median?: true
  }

  export type PostcodeMedianPriceMinAggregateInputType = {
    id?: true
    postcode?: true
    median?: true
  }

  export type PostcodeMedianPriceMaxAggregateInputType = {
    id?: true
    postcode?: true
    median?: true
  }

  export type PostcodeMedianPriceCountAggregateInputType = {
    id?: true
    postcode?: true
    median?: true
    _all?: true
  }

  export type PostcodeMedianPriceAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PostcodeMedianPrice to aggregate.
     */
    where?: PostcodeMedianPriceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PostcodeMedianPrices to fetch.
     */
    orderBy?: PostcodeMedianPriceOrderByWithRelationInput | PostcodeMedianPriceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PostcodeMedianPriceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PostcodeMedianPrices from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PostcodeMedianPrices.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned PostcodeMedianPrices
    **/
    _count?: true | PostcodeMedianPriceCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PostcodeMedianPriceAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PostcodeMedianPriceSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PostcodeMedianPriceMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PostcodeMedianPriceMaxAggregateInputType
  }

  export type GetPostcodeMedianPriceAggregateType<T extends PostcodeMedianPriceAggregateArgs> = {
        [P in keyof T & keyof AggregatePostcodeMedianPrice]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePostcodeMedianPrice[P]>
      : GetScalarType<T[P], AggregatePostcodeMedianPrice[P]>
  }




  export type PostcodeMedianPriceGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PostcodeMedianPriceWhereInput
    orderBy?: PostcodeMedianPriceOrderByWithAggregationInput | PostcodeMedianPriceOrderByWithAggregationInput[]
    by: PostcodeMedianPriceScalarFieldEnum[] | PostcodeMedianPriceScalarFieldEnum
    having?: PostcodeMedianPriceScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PostcodeMedianPriceCountAggregateInputType | true
    _avg?: PostcodeMedianPriceAvgAggregateInputType
    _sum?: PostcodeMedianPriceSumAggregateInputType
    _min?: PostcodeMedianPriceMinAggregateInputType
    _max?: PostcodeMedianPriceMaxAggregateInputType
  }

  export type PostcodeMedianPriceGroupByOutputType = {
    id: number
    postcode: string
    median: number
    _count: PostcodeMedianPriceCountAggregateOutputType | null
    _avg: PostcodeMedianPriceAvgAggregateOutputType | null
    _sum: PostcodeMedianPriceSumAggregateOutputType | null
    _min: PostcodeMedianPriceMinAggregateOutputType | null
    _max: PostcodeMedianPriceMaxAggregateOutputType | null
  }

  type GetPostcodeMedianPriceGroupByPayload<T extends PostcodeMedianPriceGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PostcodeMedianPriceGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PostcodeMedianPriceGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PostcodeMedianPriceGroupByOutputType[P]>
            : GetScalarType<T[P], PostcodeMedianPriceGroupByOutputType[P]>
        }
      >
    >


  export type PostcodeMedianPriceSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    postcode?: boolean
    median?: boolean
  }, ExtArgs["result"]["postcodeMedianPrice"]>

  export type PostcodeMedianPriceSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    postcode?: boolean
    median?: boolean
  }, ExtArgs["result"]["postcodeMedianPrice"]>

  export type PostcodeMedianPriceSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    postcode?: boolean
    median?: boolean
  }, ExtArgs["result"]["postcodeMedianPrice"]>

  export type PostcodeMedianPriceSelectScalar = {
    id?: boolean
    postcode?: boolean
    median?: boolean
  }

  export type PostcodeMedianPriceOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "postcode" | "median", ExtArgs["result"]["postcodeMedianPrice"]>

  export type $PostcodeMedianPricePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "PostcodeMedianPrice"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: number
      postcode: string
      median: number
    }, ExtArgs["result"]["postcodeMedianPrice"]>
    composites: {}
  }

  type PostcodeMedianPriceGetPayload<S extends boolean | null | undefined | PostcodeMedianPriceDefaultArgs> = $Result.GetResult<Prisma.$PostcodeMedianPricePayload, S>

  type PostcodeMedianPriceCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<PostcodeMedianPriceFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: PostcodeMedianPriceCountAggregateInputType | true
    }

  export interface PostcodeMedianPriceDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['PostcodeMedianPrice'], meta: { name: 'PostcodeMedianPrice' } }
    /**
     * Find zero or one PostcodeMedianPrice that matches the filter.
     * @param {PostcodeMedianPriceFindUniqueArgs} args - Arguments to find a PostcodeMedianPrice
     * @example
     * // Get one PostcodeMedianPrice
     * const postcodeMedianPrice = await prisma.postcodeMedianPrice.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PostcodeMedianPriceFindUniqueArgs>(args: SelectSubset<T, PostcodeMedianPriceFindUniqueArgs<ExtArgs>>): Prisma__PostcodeMedianPriceClient<$Result.GetResult<Prisma.$PostcodeMedianPricePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one PostcodeMedianPrice that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {PostcodeMedianPriceFindUniqueOrThrowArgs} args - Arguments to find a PostcodeMedianPrice
     * @example
     * // Get one PostcodeMedianPrice
     * const postcodeMedianPrice = await prisma.postcodeMedianPrice.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PostcodeMedianPriceFindUniqueOrThrowArgs>(args: SelectSubset<T, PostcodeMedianPriceFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PostcodeMedianPriceClient<$Result.GetResult<Prisma.$PostcodeMedianPricePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first PostcodeMedianPrice that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PostcodeMedianPriceFindFirstArgs} args - Arguments to find a PostcodeMedianPrice
     * @example
     * // Get one PostcodeMedianPrice
     * const postcodeMedianPrice = await prisma.postcodeMedianPrice.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PostcodeMedianPriceFindFirstArgs>(args?: SelectSubset<T, PostcodeMedianPriceFindFirstArgs<ExtArgs>>): Prisma__PostcodeMedianPriceClient<$Result.GetResult<Prisma.$PostcodeMedianPricePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first PostcodeMedianPrice that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PostcodeMedianPriceFindFirstOrThrowArgs} args - Arguments to find a PostcodeMedianPrice
     * @example
     * // Get one PostcodeMedianPrice
     * const postcodeMedianPrice = await prisma.postcodeMedianPrice.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PostcodeMedianPriceFindFirstOrThrowArgs>(args?: SelectSubset<T, PostcodeMedianPriceFindFirstOrThrowArgs<ExtArgs>>): Prisma__PostcodeMedianPriceClient<$Result.GetResult<Prisma.$PostcodeMedianPricePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more PostcodeMedianPrices that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PostcodeMedianPriceFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all PostcodeMedianPrices
     * const postcodeMedianPrices = await prisma.postcodeMedianPrice.findMany()
     * 
     * // Get first 10 PostcodeMedianPrices
     * const postcodeMedianPrices = await prisma.postcodeMedianPrice.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const postcodeMedianPriceWithIdOnly = await prisma.postcodeMedianPrice.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PostcodeMedianPriceFindManyArgs>(args?: SelectSubset<T, PostcodeMedianPriceFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PostcodeMedianPricePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a PostcodeMedianPrice.
     * @param {PostcodeMedianPriceCreateArgs} args - Arguments to create a PostcodeMedianPrice.
     * @example
     * // Create one PostcodeMedianPrice
     * const PostcodeMedianPrice = await prisma.postcodeMedianPrice.create({
     *   data: {
     *     // ... data to create a PostcodeMedianPrice
     *   }
     * })
     * 
     */
    create<T extends PostcodeMedianPriceCreateArgs>(args: SelectSubset<T, PostcodeMedianPriceCreateArgs<ExtArgs>>): Prisma__PostcodeMedianPriceClient<$Result.GetResult<Prisma.$PostcodeMedianPricePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many PostcodeMedianPrices.
     * @param {PostcodeMedianPriceCreateManyArgs} args - Arguments to create many PostcodeMedianPrices.
     * @example
     * // Create many PostcodeMedianPrices
     * const postcodeMedianPrice = await prisma.postcodeMedianPrice.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PostcodeMedianPriceCreateManyArgs>(args?: SelectSubset<T, PostcodeMedianPriceCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many PostcodeMedianPrices and returns the data saved in the database.
     * @param {PostcodeMedianPriceCreateManyAndReturnArgs} args - Arguments to create many PostcodeMedianPrices.
     * @example
     * // Create many PostcodeMedianPrices
     * const postcodeMedianPrice = await prisma.postcodeMedianPrice.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many PostcodeMedianPrices and only return the `id`
     * const postcodeMedianPriceWithIdOnly = await prisma.postcodeMedianPrice.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends PostcodeMedianPriceCreateManyAndReturnArgs>(args?: SelectSubset<T, PostcodeMedianPriceCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PostcodeMedianPricePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a PostcodeMedianPrice.
     * @param {PostcodeMedianPriceDeleteArgs} args - Arguments to delete one PostcodeMedianPrice.
     * @example
     * // Delete one PostcodeMedianPrice
     * const PostcodeMedianPrice = await prisma.postcodeMedianPrice.delete({
     *   where: {
     *     // ... filter to delete one PostcodeMedianPrice
     *   }
     * })
     * 
     */
    delete<T extends PostcodeMedianPriceDeleteArgs>(args: SelectSubset<T, PostcodeMedianPriceDeleteArgs<ExtArgs>>): Prisma__PostcodeMedianPriceClient<$Result.GetResult<Prisma.$PostcodeMedianPricePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one PostcodeMedianPrice.
     * @param {PostcodeMedianPriceUpdateArgs} args - Arguments to update one PostcodeMedianPrice.
     * @example
     * // Update one PostcodeMedianPrice
     * const postcodeMedianPrice = await prisma.postcodeMedianPrice.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PostcodeMedianPriceUpdateArgs>(args: SelectSubset<T, PostcodeMedianPriceUpdateArgs<ExtArgs>>): Prisma__PostcodeMedianPriceClient<$Result.GetResult<Prisma.$PostcodeMedianPricePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more PostcodeMedianPrices.
     * @param {PostcodeMedianPriceDeleteManyArgs} args - Arguments to filter PostcodeMedianPrices to delete.
     * @example
     * // Delete a few PostcodeMedianPrices
     * const { count } = await prisma.postcodeMedianPrice.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PostcodeMedianPriceDeleteManyArgs>(args?: SelectSubset<T, PostcodeMedianPriceDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PostcodeMedianPrices.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PostcodeMedianPriceUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many PostcodeMedianPrices
     * const postcodeMedianPrice = await prisma.postcodeMedianPrice.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PostcodeMedianPriceUpdateManyArgs>(args: SelectSubset<T, PostcodeMedianPriceUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PostcodeMedianPrices and returns the data updated in the database.
     * @param {PostcodeMedianPriceUpdateManyAndReturnArgs} args - Arguments to update many PostcodeMedianPrices.
     * @example
     * // Update many PostcodeMedianPrices
     * const postcodeMedianPrice = await prisma.postcodeMedianPrice.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more PostcodeMedianPrices and only return the `id`
     * const postcodeMedianPriceWithIdOnly = await prisma.postcodeMedianPrice.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends PostcodeMedianPriceUpdateManyAndReturnArgs>(args: SelectSubset<T, PostcodeMedianPriceUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PostcodeMedianPricePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one PostcodeMedianPrice.
     * @param {PostcodeMedianPriceUpsertArgs} args - Arguments to update or create a PostcodeMedianPrice.
     * @example
     * // Update or create a PostcodeMedianPrice
     * const postcodeMedianPrice = await prisma.postcodeMedianPrice.upsert({
     *   create: {
     *     // ... data to create a PostcodeMedianPrice
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the PostcodeMedianPrice we want to update
     *   }
     * })
     */
    upsert<T extends PostcodeMedianPriceUpsertArgs>(args: SelectSubset<T, PostcodeMedianPriceUpsertArgs<ExtArgs>>): Prisma__PostcodeMedianPriceClient<$Result.GetResult<Prisma.$PostcodeMedianPricePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of PostcodeMedianPrices.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PostcodeMedianPriceCountArgs} args - Arguments to filter PostcodeMedianPrices to count.
     * @example
     * // Count the number of PostcodeMedianPrices
     * const count = await prisma.postcodeMedianPrice.count({
     *   where: {
     *     // ... the filter for the PostcodeMedianPrices we want to count
     *   }
     * })
    **/
    count<T extends PostcodeMedianPriceCountArgs>(
      args?: Subset<T, PostcodeMedianPriceCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PostcodeMedianPriceCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a PostcodeMedianPrice.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PostcodeMedianPriceAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PostcodeMedianPriceAggregateArgs>(args: Subset<T, PostcodeMedianPriceAggregateArgs>): Prisma.PrismaPromise<GetPostcodeMedianPriceAggregateType<T>>

    /**
     * Group by PostcodeMedianPrice.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PostcodeMedianPriceGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PostcodeMedianPriceGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PostcodeMedianPriceGroupByArgs['orderBy'] }
        : { orderBy?: PostcodeMedianPriceGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PostcodeMedianPriceGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPostcodeMedianPriceGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the PostcodeMedianPrice model
   */
  readonly fields: PostcodeMedianPriceFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for PostcodeMedianPrice.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PostcodeMedianPriceClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the PostcodeMedianPrice model
   */
  interface PostcodeMedianPriceFieldRefs {
    readonly id: FieldRef<"PostcodeMedianPrice", 'Int'>
    readonly postcode: FieldRef<"PostcodeMedianPrice", 'String'>
    readonly median: FieldRef<"PostcodeMedianPrice", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * PostcodeMedianPrice findUnique
   */
  export type PostcodeMedianPriceFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PostcodeMedianPrice
     */
    select?: PostcodeMedianPriceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PostcodeMedianPrice
     */
    omit?: PostcodeMedianPriceOmit<ExtArgs> | null
    /**
     * Filter, which PostcodeMedianPrice to fetch.
     */
    where: PostcodeMedianPriceWhereUniqueInput
  }

  /**
   * PostcodeMedianPrice findUniqueOrThrow
   */
  export type PostcodeMedianPriceFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PostcodeMedianPrice
     */
    select?: PostcodeMedianPriceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PostcodeMedianPrice
     */
    omit?: PostcodeMedianPriceOmit<ExtArgs> | null
    /**
     * Filter, which PostcodeMedianPrice to fetch.
     */
    where: PostcodeMedianPriceWhereUniqueInput
  }

  /**
   * PostcodeMedianPrice findFirst
   */
  export type PostcodeMedianPriceFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PostcodeMedianPrice
     */
    select?: PostcodeMedianPriceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PostcodeMedianPrice
     */
    omit?: PostcodeMedianPriceOmit<ExtArgs> | null
    /**
     * Filter, which PostcodeMedianPrice to fetch.
     */
    where?: PostcodeMedianPriceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PostcodeMedianPrices to fetch.
     */
    orderBy?: PostcodeMedianPriceOrderByWithRelationInput | PostcodeMedianPriceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PostcodeMedianPrices.
     */
    cursor?: PostcodeMedianPriceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PostcodeMedianPrices from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PostcodeMedianPrices.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PostcodeMedianPrices.
     */
    distinct?: PostcodeMedianPriceScalarFieldEnum | PostcodeMedianPriceScalarFieldEnum[]
  }

  /**
   * PostcodeMedianPrice findFirstOrThrow
   */
  export type PostcodeMedianPriceFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PostcodeMedianPrice
     */
    select?: PostcodeMedianPriceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PostcodeMedianPrice
     */
    omit?: PostcodeMedianPriceOmit<ExtArgs> | null
    /**
     * Filter, which PostcodeMedianPrice to fetch.
     */
    where?: PostcodeMedianPriceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PostcodeMedianPrices to fetch.
     */
    orderBy?: PostcodeMedianPriceOrderByWithRelationInput | PostcodeMedianPriceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PostcodeMedianPrices.
     */
    cursor?: PostcodeMedianPriceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PostcodeMedianPrices from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PostcodeMedianPrices.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PostcodeMedianPrices.
     */
    distinct?: PostcodeMedianPriceScalarFieldEnum | PostcodeMedianPriceScalarFieldEnum[]
  }

  /**
   * PostcodeMedianPrice findMany
   */
  export type PostcodeMedianPriceFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PostcodeMedianPrice
     */
    select?: PostcodeMedianPriceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PostcodeMedianPrice
     */
    omit?: PostcodeMedianPriceOmit<ExtArgs> | null
    /**
     * Filter, which PostcodeMedianPrices to fetch.
     */
    where?: PostcodeMedianPriceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PostcodeMedianPrices to fetch.
     */
    orderBy?: PostcodeMedianPriceOrderByWithRelationInput | PostcodeMedianPriceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing PostcodeMedianPrices.
     */
    cursor?: PostcodeMedianPriceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PostcodeMedianPrices from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PostcodeMedianPrices.
     */
    skip?: number
    distinct?: PostcodeMedianPriceScalarFieldEnum | PostcodeMedianPriceScalarFieldEnum[]
  }

  /**
   * PostcodeMedianPrice create
   */
  export type PostcodeMedianPriceCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PostcodeMedianPrice
     */
    select?: PostcodeMedianPriceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PostcodeMedianPrice
     */
    omit?: PostcodeMedianPriceOmit<ExtArgs> | null
    /**
     * The data needed to create a PostcodeMedianPrice.
     */
    data: XOR<PostcodeMedianPriceCreateInput, PostcodeMedianPriceUncheckedCreateInput>
  }

  /**
   * PostcodeMedianPrice createMany
   */
  export type PostcodeMedianPriceCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many PostcodeMedianPrices.
     */
    data: PostcodeMedianPriceCreateManyInput | PostcodeMedianPriceCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * PostcodeMedianPrice createManyAndReturn
   */
  export type PostcodeMedianPriceCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PostcodeMedianPrice
     */
    select?: PostcodeMedianPriceSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the PostcodeMedianPrice
     */
    omit?: PostcodeMedianPriceOmit<ExtArgs> | null
    /**
     * The data used to create many PostcodeMedianPrices.
     */
    data: PostcodeMedianPriceCreateManyInput | PostcodeMedianPriceCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * PostcodeMedianPrice update
   */
  export type PostcodeMedianPriceUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PostcodeMedianPrice
     */
    select?: PostcodeMedianPriceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PostcodeMedianPrice
     */
    omit?: PostcodeMedianPriceOmit<ExtArgs> | null
    /**
     * The data needed to update a PostcodeMedianPrice.
     */
    data: XOR<PostcodeMedianPriceUpdateInput, PostcodeMedianPriceUncheckedUpdateInput>
    /**
     * Choose, which PostcodeMedianPrice to update.
     */
    where: PostcodeMedianPriceWhereUniqueInput
  }

  /**
   * PostcodeMedianPrice updateMany
   */
  export type PostcodeMedianPriceUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update PostcodeMedianPrices.
     */
    data: XOR<PostcodeMedianPriceUpdateManyMutationInput, PostcodeMedianPriceUncheckedUpdateManyInput>
    /**
     * Filter which PostcodeMedianPrices to update
     */
    where?: PostcodeMedianPriceWhereInput
    /**
     * Limit how many PostcodeMedianPrices to update.
     */
    limit?: number
  }

  /**
   * PostcodeMedianPrice updateManyAndReturn
   */
  export type PostcodeMedianPriceUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PostcodeMedianPrice
     */
    select?: PostcodeMedianPriceSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the PostcodeMedianPrice
     */
    omit?: PostcodeMedianPriceOmit<ExtArgs> | null
    /**
     * The data used to update PostcodeMedianPrices.
     */
    data: XOR<PostcodeMedianPriceUpdateManyMutationInput, PostcodeMedianPriceUncheckedUpdateManyInput>
    /**
     * Filter which PostcodeMedianPrices to update
     */
    where?: PostcodeMedianPriceWhereInput
    /**
     * Limit how many PostcodeMedianPrices to update.
     */
    limit?: number
  }

  /**
   * PostcodeMedianPrice upsert
   */
  export type PostcodeMedianPriceUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PostcodeMedianPrice
     */
    select?: PostcodeMedianPriceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PostcodeMedianPrice
     */
    omit?: PostcodeMedianPriceOmit<ExtArgs> | null
    /**
     * The filter to search for the PostcodeMedianPrice to update in case it exists.
     */
    where: PostcodeMedianPriceWhereUniqueInput
    /**
     * In case the PostcodeMedianPrice found by the `where` argument doesn't exist, create a new PostcodeMedianPrice with this data.
     */
    create: XOR<PostcodeMedianPriceCreateInput, PostcodeMedianPriceUncheckedCreateInput>
    /**
     * In case the PostcodeMedianPrice was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PostcodeMedianPriceUpdateInput, PostcodeMedianPriceUncheckedUpdateInput>
  }

  /**
   * PostcodeMedianPrice delete
   */
  export type PostcodeMedianPriceDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PostcodeMedianPrice
     */
    select?: PostcodeMedianPriceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PostcodeMedianPrice
     */
    omit?: PostcodeMedianPriceOmit<ExtArgs> | null
    /**
     * Filter which PostcodeMedianPrice to delete.
     */
    where: PostcodeMedianPriceWhereUniqueInput
  }

  /**
   * PostcodeMedianPrice deleteMany
   */
  export type PostcodeMedianPriceDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PostcodeMedianPrices to delete
     */
    where?: PostcodeMedianPriceWhereInput
    /**
     * Limit how many PostcodeMedianPrices to delete.
     */
    limit?: number
  }

  /**
   * PostcodeMedianPrice without action
   */
  export type PostcodeMedianPriceDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PostcodeMedianPrice
     */
    select?: PostcodeMedianPriceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PostcodeMedianPrice
     */
    omit?: PostcodeMedianPriceOmit<ExtArgs> | null
  }


  /**
   * Model ContactSubmission
   */

  export type AggregateContactSubmission = {
    _count: ContactSubmissionCountAggregateOutputType | null
    _avg: ContactSubmissionAvgAggregateOutputType | null
    _sum: ContactSubmissionSumAggregateOutputType | null
    _min: ContactSubmissionMinAggregateOutputType | null
    _max: ContactSubmissionMaxAggregateOutputType | null
  }

  export type ContactSubmissionAvgAggregateOutputType = {
    id: number | null
  }

  export type ContactSubmissionSumAggregateOutputType = {
    id: number | null
  }

  export type ContactSubmissionMinAggregateOutputType = {
    id: number | null
    name: string | null
    email: string | null
    phone: string | null
    message: string | null
    createdAt: Date | null
  }

  export type ContactSubmissionMaxAggregateOutputType = {
    id: number | null
    name: string | null
    email: string | null
    phone: string | null
    message: string | null
    createdAt: Date | null
  }

  export type ContactSubmissionCountAggregateOutputType = {
    id: number
    name: number
    email: number
    phone: number
    message: number
    createdAt: number
    _all: number
  }


  export type ContactSubmissionAvgAggregateInputType = {
    id?: true
  }

  export type ContactSubmissionSumAggregateInputType = {
    id?: true
  }

  export type ContactSubmissionMinAggregateInputType = {
    id?: true
    name?: true
    email?: true
    phone?: true
    message?: true
    createdAt?: true
  }

  export type ContactSubmissionMaxAggregateInputType = {
    id?: true
    name?: true
    email?: true
    phone?: true
    message?: true
    createdAt?: true
  }

  export type ContactSubmissionCountAggregateInputType = {
    id?: true
    name?: true
    email?: true
    phone?: true
    message?: true
    createdAt?: true
    _all?: true
  }

  export type ContactSubmissionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ContactSubmission to aggregate.
     */
    where?: ContactSubmissionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ContactSubmissions to fetch.
     */
    orderBy?: ContactSubmissionOrderByWithRelationInput | ContactSubmissionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ContactSubmissionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ContactSubmissions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ContactSubmissions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ContactSubmissions
    **/
    _count?: true | ContactSubmissionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ContactSubmissionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ContactSubmissionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ContactSubmissionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ContactSubmissionMaxAggregateInputType
  }

  export type GetContactSubmissionAggregateType<T extends ContactSubmissionAggregateArgs> = {
        [P in keyof T & keyof AggregateContactSubmission]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateContactSubmission[P]>
      : GetScalarType<T[P], AggregateContactSubmission[P]>
  }




  export type ContactSubmissionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ContactSubmissionWhereInput
    orderBy?: ContactSubmissionOrderByWithAggregationInput | ContactSubmissionOrderByWithAggregationInput[]
    by: ContactSubmissionScalarFieldEnum[] | ContactSubmissionScalarFieldEnum
    having?: ContactSubmissionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ContactSubmissionCountAggregateInputType | true
    _avg?: ContactSubmissionAvgAggregateInputType
    _sum?: ContactSubmissionSumAggregateInputType
    _min?: ContactSubmissionMinAggregateInputType
    _max?: ContactSubmissionMaxAggregateInputType
  }

  export type ContactSubmissionGroupByOutputType = {
    id: number
    name: string
    email: string
    phone: string
    message: string
    createdAt: Date
    _count: ContactSubmissionCountAggregateOutputType | null
    _avg: ContactSubmissionAvgAggregateOutputType | null
    _sum: ContactSubmissionSumAggregateOutputType | null
    _min: ContactSubmissionMinAggregateOutputType | null
    _max: ContactSubmissionMaxAggregateOutputType | null
  }

  type GetContactSubmissionGroupByPayload<T extends ContactSubmissionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ContactSubmissionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ContactSubmissionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ContactSubmissionGroupByOutputType[P]>
            : GetScalarType<T[P], ContactSubmissionGroupByOutputType[P]>
        }
      >
    >


  export type ContactSubmissionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    email?: boolean
    phone?: boolean
    message?: boolean
    createdAt?: boolean
  }, ExtArgs["result"]["contactSubmission"]>

  export type ContactSubmissionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    email?: boolean
    phone?: boolean
    message?: boolean
    createdAt?: boolean
  }, ExtArgs["result"]["contactSubmission"]>

  export type ContactSubmissionSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    email?: boolean
    phone?: boolean
    message?: boolean
    createdAt?: boolean
  }, ExtArgs["result"]["contactSubmission"]>

  export type ContactSubmissionSelectScalar = {
    id?: boolean
    name?: boolean
    email?: boolean
    phone?: boolean
    message?: boolean
    createdAt?: boolean
  }

  export type ContactSubmissionOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "email" | "phone" | "message" | "createdAt", ExtArgs["result"]["contactSubmission"]>

  export type $ContactSubmissionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ContactSubmission"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
      email: string
      phone: string
      message: string
      createdAt: Date
    }, ExtArgs["result"]["contactSubmission"]>
    composites: {}
  }

  type ContactSubmissionGetPayload<S extends boolean | null | undefined | ContactSubmissionDefaultArgs> = $Result.GetResult<Prisma.$ContactSubmissionPayload, S>

  type ContactSubmissionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ContactSubmissionFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ContactSubmissionCountAggregateInputType | true
    }

  export interface ContactSubmissionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ContactSubmission'], meta: { name: 'ContactSubmission' } }
    /**
     * Find zero or one ContactSubmission that matches the filter.
     * @param {ContactSubmissionFindUniqueArgs} args - Arguments to find a ContactSubmission
     * @example
     * // Get one ContactSubmission
     * const contactSubmission = await prisma.contactSubmission.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ContactSubmissionFindUniqueArgs>(args: SelectSubset<T, ContactSubmissionFindUniqueArgs<ExtArgs>>): Prisma__ContactSubmissionClient<$Result.GetResult<Prisma.$ContactSubmissionPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one ContactSubmission that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ContactSubmissionFindUniqueOrThrowArgs} args - Arguments to find a ContactSubmission
     * @example
     * // Get one ContactSubmission
     * const contactSubmission = await prisma.contactSubmission.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ContactSubmissionFindUniqueOrThrowArgs>(args: SelectSubset<T, ContactSubmissionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ContactSubmissionClient<$Result.GetResult<Prisma.$ContactSubmissionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ContactSubmission that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContactSubmissionFindFirstArgs} args - Arguments to find a ContactSubmission
     * @example
     * // Get one ContactSubmission
     * const contactSubmission = await prisma.contactSubmission.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ContactSubmissionFindFirstArgs>(args?: SelectSubset<T, ContactSubmissionFindFirstArgs<ExtArgs>>): Prisma__ContactSubmissionClient<$Result.GetResult<Prisma.$ContactSubmissionPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ContactSubmission that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContactSubmissionFindFirstOrThrowArgs} args - Arguments to find a ContactSubmission
     * @example
     * // Get one ContactSubmission
     * const contactSubmission = await prisma.contactSubmission.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ContactSubmissionFindFirstOrThrowArgs>(args?: SelectSubset<T, ContactSubmissionFindFirstOrThrowArgs<ExtArgs>>): Prisma__ContactSubmissionClient<$Result.GetResult<Prisma.$ContactSubmissionPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more ContactSubmissions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContactSubmissionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ContactSubmissions
     * const contactSubmissions = await prisma.contactSubmission.findMany()
     * 
     * // Get first 10 ContactSubmissions
     * const contactSubmissions = await prisma.contactSubmission.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const contactSubmissionWithIdOnly = await prisma.contactSubmission.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ContactSubmissionFindManyArgs>(args?: SelectSubset<T, ContactSubmissionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ContactSubmissionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a ContactSubmission.
     * @param {ContactSubmissionCreateArgs} args - Arguments to create a ContactSubmission.
     * @example
     * // Create one ContactSubmission
     * const ContactSubmission = await prisma.contactSubmission.create({
     *   data: {
     *     // ... data to create a ContactSubmission
     *   }
     * })
     * 
     */
    create<T extends ContactSubmissionCreateArgs>(args: SelectSubset<T, ContactSubmissionCreateArgs<ExtArgs>>): Prisma__ContactSubmissionClient<$Result.GetResult<Prisma.$ContactSubmissionPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many ContactSubmissions.
     * @param {ContactSubmissionCreateManyArgs} args - Arguments to create many ContactSubmissions.
     * @example
     * // Create many ContactSubmissions
     * const contactSubmission = await prisma.contactSubmission.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ContactSubmissionCreateManyArgs>(args?: SelectSubset<T, ContactSubmissionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ContactSubmissions and returns the data saved in the database.
     * @param {ContactSubmissionCreateManyAndReturnArgs} args - Arguments to create many ContactSubmissions.
     * @example
     * // Create many ContactSubmissions
     * const contactSubmission = await prisma.contactSubmission.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ContactSubmissions and only return the `id`
     * const contactSubmissionWithIdOnly = await prisma.contactSubmission.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ContactSubmissionCreateManyAndReturnArgs>(args?: SelectSubset<T, ContactSubmissionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ContactSubmissionPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a ContactSubmission.
     * @param {ContactSubmissionDeleteArgs} args - Arguments to delete one ContactSubmission.
     * @example
     * // Delete one ContactSubmission
     * const ContactSubmission = await prisma.contactSubmission.delete({
     *   where: {
     *     // ... filter to delete one ContactSubmission
     *   }
     * })
     * 
     */
    delete<T extends ContactSubmissionDeleteArgs>(args: SelectSubset<T, ContactSubmissionDeleteArgs<ExtArgs>>): Prisma__ContactSubmissionClient<$Result.GetResult<Prisma.$ContactSubmissionPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one ContactSubmission.
     * @param {ContactSubmissionUpdateArgs} args - Arguments to update one ContactSubmission.
     * @example
     * // Update one ContactSubmission
     * const contactSubmission = await prisma.contactSubmission.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ContactSubmissionUpdateArgs>(args: SelectSubset<T, ContactSubmissionUpdateArgs<ExtArgs>>): Prisma__ContactSubmissionClient<$Result.GetResult<Prisma.$ContactSubmissionPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more ContactSubmissions.
     * @param {ContactSubmissionDeleteManyArgs} args - Arguments to filter ContactSubmissions to delete.
     * @example
     * // Delete a few ContactSubmissions
     * const { count } = await prisma.contactSubmission.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ContactSubmissionDeleteManyArgs>(args?: SelectSubset<T, ContactSubmissionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ContactSubmissions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContactSubmissionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ContactSubmissions
     * const contactSubmission = await prisma.contactSubmission.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ContactSubmissionUpdateManyArgs>(args: SelectSubset<T, ContactSubmissionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ContactSubmissions and returns the data updated in the database.
     * @param {ContactSubmissionUpdateManyAndReturnArgs} args - Arguments to update many ContactSubmissions.
     * @example
     * // Update many ContactSubmissions
     * const contactSubmission = await prisma.contactSubmission.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more ContactSubmissions and only return the `id`
     * const contactSubmissionWithIdOnly = await prisma.contactSubmission.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ContactSubmissionUpdateManyAndReturnArgs>(args: SelectSubset<T, ContactSubmissionUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ContactSubmissionPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one ContactSubmission.
     * @param {ContactSubmissionUpsertArgs} args - Arguments to update or create a ContactSubmission.
     * @example
     * // Update or create a ContactSubmission
     * const contactSubmission = await prisma.contactSubmission.upsert({
     *   create: {
     *     // ... data to create a ContactSubmission
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ContactSubmission we want to update
     *   }
     * })
     */
    upsert<T extends ContactSubmissionUpsertArgs>(args: SelectSubset<T, ContactSubmissionUpsertArgs<ExtArgs>>): Prisma__ContactSubmissionClient<$Result.GetResult<Prisma.$ContactSubmissionPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of ContactSubmissions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContactSubmissionCountArgs} args - Arguments to filter ContactSubmissions to count.
     * @example
     * // Count the number of ContactSubmissions
     * const count = await prisma.contactSubmission.count({
     *   where: {
     *     // ... the filter for the ContactSubmissions we want to count
     *   }
     * })
    **/
    count<T extends ContactSubmissionCountArgs>(
      args?: Subset<T, ContactSubmissionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ContactSubmissionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ContactSubmission.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContactSubmissionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ContactSubmissionAggregateArgs>(args: Subset<T, ContactSubmissionAggregateArgs>): Prisma.PrismaPromise<GetContactSubmissionAggregateType<T>>

    /**
     * Group by ContactSubmission.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContactSubmissionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ContactSubmissionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ContactSubmissionGroupByArgs['orderBy'] }
        : { orderBy?: ContactSubmissionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ContactSubmissionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetContactSubmissionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ContactSubmission model
   */
  readonly fields: ContactSubmissionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ContactSubmission.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ContactSubmissionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ContactSubmission model
   */
  interface ContactSubmissionFieldRefs {
    readonly id: FieldRef<"ContactSubmission", 'Int'>
    readonly name: FieldRef<"ContactSubmission", 'String'>
    readonly email: FieldRef<"ContactSubmission", 'String'>
    readonly phone: FieldRef<"ContactSubmission", 'String'>
    readonly message: FieldRef<"ContactSubmission", 'String'>
    readonly createdAt: FieldRef<"ContactSubmission", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * ContactSubmission findUnique
   */
  export type ContactSubmissionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContactSubmission
     */
    select?: ContactSubmissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ContactSubmission
     */
    omit?: ContactSubmissionOmit<ExtArgs> | null
    /**
     * Filter, which ContactSubmission to fetch.
     */
    where: ContactSubmissionWhereUniqueInput
  }

  /**
   * ContactSubmission findUniqueOrThrow
   */
  export type ContactSubmissionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContactSubmission
     */
    select?: ContactSubmissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ContactSubmission
     */
    omit?: ContactSubmissionOmit<ExtArgs> | null
    /**
     * Filter, which ContactSubmission to fetch.
     */
    where: ContactSubmissionWhereUniqueInput
  }

  /**
   * ContactSubmission findFirst
   */
  export type ContactSubmissionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContactSubmission
     */
    select?: ContactSubmissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ContactSubmission
     */
    omit?: ContactSubmissionOmit<ExtArgs> | null
    /**
     * Filter, which ContactSubmission to fetch.
     */
    where?: ContactSubmissionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ContactSubmissions to fetch.
     */
    orderBy?: ContactSubmissionOrderByWithRelationInput | ContactSubmissionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ContactSubmissions.
     */
    cursor?: ContactSubmissionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ContactSubmissions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ContactSubmissions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ContactSubmissions.
     */
    distinct?: ContactSubmissionScalarFieldEnum | ContactSubmissionScalarFieldEnum[]
  }

  /**
   * ContactSubmission findFirstOrThrow
   */
  export type ContactSubmissionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContactSubmission
     */
    select?: ContactSubmissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ContactSubmission
     */
    omit?: ContactSubmissionOmit<ExtArgs> | null
    /**
     * Filter, which ContactSubmission to fetch.
     */
    where?: ContactSubmissionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ContactSubmissions to fetch.
     */
    orderBy?: ContactSubmissionOrderByWithRelationInput | ContactSubmissionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ContactSubmissions.
     */
    cursor?: ContactSubmissionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ContactSubmissions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ContactSubmissions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ContactSubmissions.
     */
    distinct?: ContactSubmissionScalarFieldEnum | ContactSubmissionScalarFieldEnum[]
  }

  /**
   * ContactSubmission findMany
   */
  export type ContactSubmissionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContactSubmission
     */
    select?: ContactSubmissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ContactSubmission
     */
    omit?: ContactSubmissionOmit<ExtArgs> | null
    /**
     * Filter, which ContactSubmissions to fetch.
     */
    where?: ContactSubmissionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ContactSubmissions to fetch.
     */
    orderBy?: ContactSubmissionOrderByWithRelationInput | ContactSubmissionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ContactSubmissions.
     */
    cursor?: ContactSubmissionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ContactSubmissions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ContactSubmissions.
     */
    skip?: number
    distinct?: ContactSubmissionScalarFieldEnum | ContactSubmissionScalarFieldEnum[]
  }

  /**
   * ContactSubmission create
   */
  export type ContactSubmissionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContactSubmission
     */
    select?: ContactSubmissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ContactSubmission
     */
    omit?: ContactSubmissionOmit<ExtArgs> | null
    /**
     * The data needed to create a ContactSubmission.
     */
    data: XOR<ContactSubmissionCreateInput, ContactSubmissionUncheckedCreateInput>
  }

  /**
   * ContactSubmission createMany
   */
  export type ContactSubmissionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ContactSubmissions.
     */
    data: ContactSubmissionCreateManyInput | ContactSubmissionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ContactSubmission createManyAndReturn
   */
  export type ContactSubmissionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContactSubmission
     */
    select?: ContactSubmissionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ContactSubmission
     */
    omit?: ContactSubmissionOmit<ExtArgs> | null
    /**
     * The data used to create many ContactSubmissions.
     */
    data: ContactSubmissionCreateManyInput | ContactSubmissionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ContactSubmission update
   */
  export type ContactSubmissionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContactSubmission
     */
    select?: ContactSubmissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ContactSubmission
     */
    omit?: ContactSubmissionOmit<ExtArgs> | null
    /**
     * The data needed to update a ContactSubmission.
     */
    data: XOR<ContactSubmissionUpdateInput, ContactSubmissionUncheckedUpdateInput>
    /**
     * Choose, which ContactSubmission to update.
     */
    where: ContactSubmissionWhereUniqueInput
  }

  /**
   * ContactSubmission updateMany
   */
  export type ContactSubmissionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ContactSubmissions.
     */
    data: XOR<ContactSubmissionUpdateManyMutationInput, ContactSubmissionUncheckedUpdateManyInput>
    /**
     * Filter which ContactSubmissions to update
     */
    where?: ContactSubmissionWhereInput
    /**
     * Limit how many ContactSubmissions to update.
     */
    limit?: number
  }

  /**
   * ContactSubmission updateManyAndReturn
   */
  export type ContactSubmissionUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContactSubmission
     */
    select?: ContactSubmissionSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ContactSubmission
     */
    omit?: ContactSubmissionOmit<ExtArgs> | null
    /**
     * The data used to update ContactSubmissions.
     */
    data: XOR<ContactSubmissionUpdateManyMutationInput, ContactSubmissionUncheckedUpdateManyInput>
    /**
     * Filter which ContactSubmissions to update
     */
    where?: ContactSubmissionWhereInput
    /**
     * Limit how many ContactSubmissions to update.
     */
    limit?: number
  }

  /**
   * ContactSubmission upsert
   */
  export type ContactSubmissionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContactSubmission
     */
    select?: ContactSubmissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ContactSubmission
     */
    omit?: ContactSubmissionOmit<ExtArgs> | null
    /**
     * The filter to search for the ContactSubmission to update in case it exists.
     */
    where: ContactSubmissionWhereUniqueInput
    /**
     * In case the ContactSubmission found by the `where` argument doesn't exist, create a new ContactSubmission with this data.
     */
    create: XOR<ContactSubmissionCreateInput, ContactSubmissionUncheckedCreateInput>
    /**
     * In case the ContactSubmission was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ContactSubmissionUpdateInput, ContactSubmissionUncheckedUpdateInput>
  }

  /**
   * ContactSubmission delete
   */
  export type ContactSubmissionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContactSubmission
     */
    select?: ContactSubmissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ContactSubmission
     */
    omit?: ContactSubmissionOmit<ExtArgs> | null
    /**
     * Filter which ContactSubmission to delete.
     */
    where: ContactSubmissionWhereUniqueInput
  }

  /**
   * ContactSubmission deleteMany
   */
  export type ContactSubmissionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ContactSubmissions to delete
     */
    where?: ContactSubmissionWhereInput
    /**
     * Limit how many ContactSubmissions to delete.
     */
    limit?: number
  }

  /**
   * ContactSubmission without action
   */
  export type ContactSubmissionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContactSubmission
     */
    select?: ContactSubmissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ContactSubmission
     */
    omit?: ContactSubmissionOmit<ExtArgs> | null
  }


  /**
   * Model CMARequest
   */

  export type AggregateCMARequest = {
    _count: CMARequestCountAggregateOutputType | null
    _avg: CMARequestAvgAggregateOutputType | null
    _sum: CMARequestSumAggregateOutputType | null
    _min: CMARequestMinAggregateOutputType | null
    _max: CMARequestMaxAggregateOutputType | null
  }

  export type CMARequestAvgAggregateOutputType = {
    id: number | null
  }

  export type CMARequestSumAggregateOutputType = {
    id: number | null
  }

  export type CMARequestMinAggregateOutputType = {
    id: number | null
    email: string | null
    address: string | null
    postcode: string | null
    createdAt: Date | null
  }

  export type CMARequestMaxAggregateOutputType = {
    id: number | null
    email: string | null
    address: string | null
    postcode: string | null
    createdAt: Date | null
  }

  export type CMARequestCountAggregateOutputType = {
    id: number
    email: number
    address: number
    postcode: number
    createdAt: number
    _all: number
  }


  export type CMARequestAvgAggregateInputType = {
    id?: true
  }

  export type CMARequestSumAggregateInputType = {
    id?: true
  }

  export type CMARequestMinAggregateInputType = {
    id?: true
    email?: true
    address?: true
    postcode?: true
    createdAt?: true
  }

  export type CMARequestMaxAggregateInputType = {
    id?: true
    email?: true
    address?: true
    postcode?: true
    createdAt?: true
  }

  export type CMARequestCountAggregateInputType = {
    id?: true
    email?: true
    address?: true
    postcode?: true
    createdAt?: true
    _all?: true
  }

  export type CMARequestAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CMARequest to aggregate.
     */
    where?: CMARequestWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CMARequests to fetch.
     */
    orderBy?: CMARequestOrderByWithRelationInput | CMARequestOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CMARequestWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CMARequests from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CMARequests.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned CMARequests
    **/
    _count?: true | CMARequestCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CMARequestAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CMARequestSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CMARequestMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CMARequestMaxAggregateInputType
  }

  export type GetCMARequestAggregateType<T extends CMARequestAggregateArgs> = {
        [P in keyof T & keyof AggregateCMARequest]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCMARequest[P]>
      : GetScalarType<T[P], AggregateCMARequest[P]>
  }




  export type CMARequestGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CMARequestWhereInput
    orderBy?: CMARequestOrderByWithAggregationInput | CMARequestOrderByWithAggregationInput[]
    by: CMARequestScalarFieldEnum[] | CMARequestScalarFieldEnum
    having?: CMARequestScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CMARequestCountAggregateInputType | true
    _avg?: CMARequestAvgAggregateInputType
    _sum?: CMARequestSumAggregateInputType
    _min?: CMARequestMinAggregateInputType
    _max?: CMARequestMaxAggregateInputType
  }

  export type CMARequestGroupByOutputType = {
    id: number
    email: string
    address: string
    postcode: string
    createdAt: Date
    _count: CMARequestCountAggregateOutputType | null
    _avg: CMARequestAvgAggregateOutputType | null
    _sum: CMARequestSumAggregateOutputType | null
    _min: CMARequestMinAggregateOutputType | null
    _max: CMARequestMaxAggregateOutputType | null
  }

  type GetCMARequestGroupByPayload<T extends CMARequestGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CMARequestGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CMARequestGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CMARequestGroupByOutputType[P]>
            : GetScalarType<T[P], CMARequestGroupByOutputType[P]>
        }
      >
    >


  export type CMARequestSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    address?: boolean
    postcode?: boolean
    createdAt?: boolean
  }, ExtArgs["result"]["cMARequest"]>

  export type CMARequestSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    address?: boolean
    postcode?: boolean
    createdAt?: boolean
  }, ExtArgs["result"]["cMARequest"]>

  export type CMARequestSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    address?: boolean
    postcode?: boolean
    createdAt?: boolean
  }, ExtArgs["result"]["cMARequest"]>

  export type CMARequestSelectScalar = {
    id?: boolean
    email?: boolean
    address?: boolean
    postcode?: boolean
    createdAt?: boolean
  }

  export type CMARequestOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "email" | "address" | "postcode" | "createdAt", ExtArgs["result"]["cMARequest"]>

  export type $CMARequestPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "CMARequest"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: number
      email: string
      address: string
      postcode: string
      createdAt: Date
    }, ExtArgs["result"]["cMARequest"]>
    composites: {}
  }

  type CMARequestGetPayload<S extends boolean | null | undefined | CMARequestDefaultArgs> = $Result.GetResult<Prisma.$CMARequestPayload, S>

  type CMARequestCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<CMARequestFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: CMARequestCountAggregateInputType | true
    }

  export interface CMARequestDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['CMARequest'], meta: { name: 'CMARequest' } }
    /**
     * Find zero or one CMARequest that matches the filter.
     * @param {CMARequestFindUniqueArgs} args - Arguments to find a CMARequest
     * @example
     * // Get one CMARequest
     * const cMARequest = await prisma.cMARequest.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CMARequestFindUniqueArgs>(args: SelectSubset<T, CMARequestFindUniqueArgs<ExtArgs>>): Prisma__CMARequestClient<$Result.GetResult<Prisma.$CMARequestPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one CMARequest that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {CMARequestFindUniqueOrThrowArgs} args - Arguments to find a CMARequest
     * @example
     * // Get one CMARequest
     * const cMARequest = await prisma.cMARequest.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CMARequestFindUniqueOrThrowArgs>(args: SelectSubset<T, CMARequestFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CMARequestClient<$Result.GetResult<Prisma.$CMARequestPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first CMARequest that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CMARequestFindFirstArgs} args - Arguments to find a CMARequest
     * @example
     * // Get one CMARequest
     * const cMARequest = await prisma.cMARequest.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CMARequestFindFirstArgs>(args?: SelectSubset<T, CMARequestFindFirstArgs<ExtArgs>>): Prisma__CMARequestClient<$Result.GetResult<Prisma.$CMARequestPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first CMARequest that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CMARequestFindFirstOrThrowArgs} args - Arguments to find a CMARequest
     * @example
     * // Get one CMARequest
     * const cMARequest = await prisma.cMARequest.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CMARequestFindFirstOrThrowArgs>(args?: SelectSubset<T, CMARequestFindFirstOrThrowArgs<ExtArgs>>): Prisma__CMARequestClient<$Result.GetResult<Prisma.$CMARequestPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more CMARequests that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CMARequestFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all CMARequests
     * const cMARequests = await prisma.cMARequest.findMany()
     * 
     * // Get first 10 CMARequests
     * const cMARequests = await prisma.cMARequest.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const cMARequestWithIdOnly = await prisma.cMARequest.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CMARequestFindManyArgs>(args?: SelectSubset<T, CMARequestFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CMARequestPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a CMARequest.
     * @param {CMARequestCreateArgs} args - Arguments to create a CMARequest.
     * @example
     * // Create one CMARequest
     * const CMARequest = await prisma.cMARequest.create({
     *   data: {
     *     // ... data to create a CMARequest
     *   }
     * })
     * 
     */
    create<T extends CMARequestCreateArgs>(args: SelectSubset<T, CMARequestCreateArgs<ExtArgs>>): Prisma__CMARequestClient<$Result.GetResult<Prisma.$CMARequestPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many CMARequests.
     * @param {CMARequestCreateManyArgs} args - Arguments to create many CMARequests.
     * @example
     * // Create many CMARequests
     * const cMARequest = await prisma.cMARequest.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CMARequestCreateManyArgs>(args?: SelectSubset<T, CMARequestCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many CMARequests and returns the data saved in the database.
     * @param {CMARequestCreateManyAndReturnArgs} args - Arguments to create many CMARequests.
     * @example
     * // Create many CMARequests
     * const cMARequest = await prisma.cMARequest.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many CMARequests and only return the `id`
     * const cMARequestWithIdOnly = await prisma.cMARequest.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CMARequestCreateManyAndReturnArgs>(args?: SelectSubset<T, CMARequestCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CMARequestPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a CMARequest.
     * @param {CMARequestDeleteArgs} args - Arguments to delete one CMARequest.
     * @example
     * // Delete one CMARequest
     * const CMARequest = await prisma.cMARequest.delete({
     *   where: {
     *     // ... filter to delete one CMARequest
     *   }
     * })
     * 
     */
    delete<T extends CMARequestDeleteArgs>(args: SelectSubset<T, CMARequestDeleteArgs<ExtArgs>>): Prisma__CMARequestClient<$Result.GetResult<Prisma.$CMARequestPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one CMARequest.
     * @param {CMARequestUpdateArgs} args - Arguments to update one CMARequest.
     * @example
     * // Update one CMARequest
     * const cMARequest = await prisma.cMARequest.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CMARequestUpdateArgs>(args: SelectSubset<T, CMARequestUpdateArgs<ExtArgs>>): Prisma__CMARequestClient<$Result.GetResult<Prisma.$CMARequestPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more CMARequests.
     * @param {CMARequestDeleteManyArgs} args - Arguments to filter CMARequests to delete.
     * @example
     * // Delete a few CMARequests
     * const { count } = await prisma.cMARequest.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CMARequestDeleteManyArgs>(args?: SelectSubset<T, CMARequestDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CMARequests.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CMARequestUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many CMARequests
     * const cMARequest = await prisma.cMARequest.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CMARequestUpdateManyArgs>(args: SelectSubset<T, CMARequestUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CMARequests and returns the data updated in the database.
     * @param {CMARequestUpdateManyAndReturnArgs} args - Arguments to update many CMARequests.
     * @example
     * // Update many CMARequests
     * const cMARequest = await prisma.cMARequest.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more CMARequests and only return the `id`
     * const cMARequestWithIdOnly = await prisma.cMARequest.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends CMARequestUpdateManyAndReturnArgs>(args: SelectSubset<T, CMARequestUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CMARequestPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one CMARequest.
     * @param {CMARequestUpsertArgs} args - Arguments to update or create a CMARequest.
     * @example
     * // Update or create a CMARequest
     * const cMARequest = await prisma.cMARequest.upsert({
     *   create: {
     *     // ... data to create a CMARequest
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the CMARequest we want to update
     *   }
     * })
     */
    upsert<T extends CMARequestUpsertArgs>(args: SelectSubset<T, CMARequestUpsertArgs<ExtArgs>>): Prisma__CMARequestClient<$Result.GetResult<Prisma.$CMARequestPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of CMARequests.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CMARequestCountArgs} args - Arguments to filter CMARequests to count.
     * @example
     * // Count the number of CMARequests
     * const count = await prisma.cMARequest.count({
     *   where: {
     *     // ... the filter for the CMARequests we want to count
     *   }
     * })
    **/
    count<T extends CMARequestCountArgs>(
      args?: Subset<T, CMARequestCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CMARequestCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a CMARequest.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CMARequestAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CMARequestAggregateArgs>(args: Subset<T, CMARequestAggregateArgs>): Prisma.PrismaPromise<GetCMARequestAggregateType<T>>

    /**
     * Group by CMARequest.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CMARequestGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CMARequestGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CMARequestGroupByArgs['orderBy'] }
        : { orderBy?: CMARequestGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CMARequestGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCMARequestGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the CMARequest model
   */
  readonly fields: CMARequestFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for CMARequest.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CMARequestClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the CMARequest model
   */
  interface CMARequestFieldRefs {
    readonly id: FieldRef<"CMARequest", 'Int'>
    readonly email: FieldRef<"CMARequest", 'String'>
    readonly address: FieldRef<"CMARequest", 'String'>
    readonly postcode: FieldRef<"CMARequest", 'String'>
    readonly createdAt: FieldRef<"CMARequest", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * CMARequest findUnique
   */
  export type CMARequestFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CMARequest
     */
    select?: CMARequestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CMARequest
     */
    omit?: CMARequestOmit<ExtArgs> | null
    /**
     * Filter, which CMARequest to fetch.
     */
    where: CMARequestWhereUniqueInput
  }

  /**
   * CMARequest findUniqueOrThrow
   */
  export type CMARequestFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CMARequest
     */
    select?: CMARequestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CMARequest
     */
    omit?: CMARequestOmit<ExtArgs> | null
    /**
     * Filter, which CMARequest to fetch.
     */
    where: CMARequestWhereUniqueInput
  }

  /**
   * CMARequest findFirst
   */
  export type CMARequestFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CMARequest
     */
    select?: CMARequestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CMARequest
     */
    omit?: CMARequestOmit<ExtArgs> | null
    /**
     * Filter, which CMARequest to fetch.
     */
    where?: CMARequestWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CMARequests to fetch.
     */
    orderBy?: CMARequestOrderByWithRelationInput | CMARequestOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CMARequests.
     */
    cursor?: CMARequestWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CMARequests from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CMARequests.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CMARequests.
     */
    distinct?: CMARequestScalarFieldEnum | CMARequestScalarFieldEnum[]
  }

  /**
   * CMARequest findFirstOrThrow
   */
  export type CMARequestFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CMARequest
     */
    select?: CMARequestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CMARequest
     */
    omit?: CMARequestOmit<ExtArgs> | null
    /**
     * Filter, which CMARequest to fetch.
     */
    where?: CMARequestWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CMARequests to fetch.
     */
    orderBy?: CMARequestOrderByWithRelationInput | CMARequestOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CMARequests.
     */
    cursor?: CMARequestWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CMARequests from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CMARequests.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CMARequests.
     */
    distinct?: CMARequestScalarFieldEnum | CMARequestScalarFieldEnum[]
  }

  /**
   * CMARequest findMany
   */
  export type CMARequestFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CMARequest
     */
    select?: CMARequestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CMARequest
     */
    omit?: CMARequestOmit<ExtArgs> | null
    /**
     * Filter, which CMARequests to fetch.
     */
    where?: CMARequestWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CMARequests to fetch.
     */
    orderBy?: CMARequestOrderByWithRelationInput | CMARequestOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing CMARequests.
     */
    cursor?: CMARequestWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CMARequests from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CMARequests.
     */
    skip?: number
    distinct?: CMARequestScalarFieldEnum | CMARequestScalarFieldEnum[]
  }

  /**
   * CMARequest create
   */
  export type CMARequestCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CMARequest
     */
    select?: CMARequestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CMARequest
     */
    omit?: CMARequestOmit<ExtArgs> | null
    /**
     * The data needed to create a CMARequest.
     */
    data: XOR<CMARequestCreateInput, CMARequestUncheckedCreateInput>
  }

  /**
   * CMARequest createMany
   */
  export type CMARequestCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many CMARequests.
     */
    data: CMARequestCreateManyInput | CMARequestCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * CMARequest createManyAndReturn
   */
  export type CMARequestCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CMARequest
     */
    select?: CMARequestSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the CMARequest
     */
    omit?: CMARequestOmit<ExtArgs> | null
    /**
     * The data used to create many CMARequests.
     */
    data: CMARequestCreateManyInput | CMARequestCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * CMARequest update
   */
  export type CMARequestUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CMARequest
     */
    select?: CMARequestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CMARequest
     */
    omit?: CMARequestOmit<ExtArgs> | null
    /**
     * The data needed to update a CMARequest.
     */
    data: XOR<CMARequestUpdateInput, CMARequestUncheckedUpdateInput>
    /**
     * Choose, which CMARequest to update.
     */
    where: CMARequestWhereUniqueInput
  }

  /**
   * CMARequest updateMany
   */
  export type CMARequestUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update CMARequests.
     */
    data: XOR<CMARequestUpdateManyMutationInput, CMARequestUncheckedUpdateManyInput>
    /**
     * Filter which CMARequests to update
     */
    where?: CMARequestWhereInput
    /**
     * Limit how many CMARequests to update.
     */
    limit?: number
  }

  /**
   * CMARequest updateManyAndReturn
   */
  export type CMARequestUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CMARequest
     */
    select?: CMARequestSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the CMARequest
     */
    omit?: CMARequestOmit<ExtArgs> | null
    /**
     * The data used to update CMARequests.
     */
    data: XOR<CMARequestUpdateManyMutationInput, CMARequestUncheckedUpdateManyInput>
    /**
     * Filter which CMARequests to update
     */
    where?: CMARequestWhereInput
    /**
     * Limit how many CMARequests to update.
     */
    limit?: number
  }

  /**
   * CMARequest upsert
   */
  export type CMARequestUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CMARequest
     */
    select?: CMARequestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CMARequest
     */
    omit?: CMARequestOmit<ExtArgs> | null
    /**
     * The filter to search for the CMARequest to update in case it exists.
     */
    where: CMARequestWhereUniqueInput
    /**
     * In case the CMARequest found by the `where` argument doesn't exist, create a new CMARequest with this data.
     */
    create: XOR<CMARequestCreateInput, CMARequestUncheckedCreateInput>
    /**
     * In case the CMARequest was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CMARequestUpdateInput, CMARequestUncheckedUpdateInput>
  }

  /**
   * CMARequest delete
   */
  export type CMARequestDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CMARequest
     */
    select?: CMARequestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CMARequest
     */
    omit?: CMARequestOmit<ExtArgs> | null
    /**
     * Filter which CMARequest to delete.
     */
    where: CMARequestWhereUniqueInput
  }

  /**
   * CMARequest deleteMany
   */
  export type CMARequestDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CMARequests to delete
     */
    where?: CMARequestWhereInput
    /**
     * Limit how many CMARequests to delete.
     */
    limit?: number
  }

  /**
   * CMARequest without action
   */
  export type CMARequestDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CMARequest
     */
    select?: CMARequestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CMARequest
     */
    omit?: CMARequestOmit<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const PostcodeMedianPriceScalarFieldEnum: {
    id: 'id',
    postcode: 'postcode',
    median: 'median'
  };

  export type PostcodeMedianPriceScalarFieldEnum = (typeof PostcodeMedianPriceScalarFieldEnum)[keyof typeof PostcodeMedianPriceScalarFieldEnum]


  export const ContactSubmissionScalarFieldEnum: {
    id: 'id',
    name: 'name',
    email: 'email',
    phone: 'phone',
    message: 'message',
    createdAt: 'createdAt'
  };

  export type ContactSubmissionScalarFieldEnum = (typeof ContactSubmissionScalarFieldEnum)[keyof typeof ContactSubmissionScalarFieldEnum]


  export const CMARequestScalarFieldEnum: {
    id: 'id',
    email: 'email',
    address: 'address',
    postcode: 'postcode',
    createdAt: 'createdAt'
  };

  export type CMARequestScalarFieldEnum = (typeof CMARequestScalarFieldEnum)[keyof typeof CMARequestScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  /**
   * Field references
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type PostcodeMedianPriceWhereInput = {
    AND?: PostcodeMedianPriceWhereInput | PostcodeMedianPriceWhereInput[]
    OR?: PostcodeMedianPriceWhereInput[]
    NOT?: PostcodeMedianPriceWhereInput | PostcodeMedianPriceWhereInput[]
    id?: IntFilter<"PostcodeMedianPrice"> | number
    postcode?: StringFilter<"PostcodeMedianPrice"> | string
    median?: IntFilter<"PostcodeMedianPrice"> | number
  }

  export type PostcodeMedianPriceOrderByWithRelationInput = {
    id?: SortOrder
    postcode?: SortOrder
    median?: SortOrder
  }

  export type PostcodeMedianPriceWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    postcode?: string
    AND?: PostcodeMedianPriceWhereInput | PostcodeMedianPriceWhereInput[]
    OR?: PostcodeMedianPriceWhereInput[]
    NOT?: PostcodeMedianPriceWhereInput | PostcodeMedianPriceWhereInput[]
    median?: IntFilter<"PostcodeMedianPrice"> | number
  }, "id" | "postcode">

  export type PostcodeMedianPriceOrderByWithAggregationInput = {
    id?: SortOrder
    postcode?: SortOrder
    median?: SortOrder
    _count?: PostcodeMedianPriceCountOrderByAggregateInput
    _avg?: PostcodeMedianPriceAvgOrderByAggregateInput
    _max?: PostcodeMedianPriceMaxOrderByAggregateInput
    _min?: PostcodeMedianPriceMinOrderByAggregateInput
    _sum?: PostcodeMedianPriceSumOrderByAggregateInput
  }

  export type PostcodeMedianPriceScalarWhereWithAggregatesInput = {
    AND?: PostcodeMedianPriceScalarWhereWithAggregatesInput | PostcodeMedianPriceScalarWhereWithAggregatesInput[]
    OR?: PostcodeMedianPriceScalarWhereWithAggregatesInput[]
    NOT?: PostcodeMedianPriceScalarWhereWithAggregatesInput | PostcodeMedianPriceScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"PostcodeMedianPrice"> | number
    postcode?: StringWithAggregatesFilter<"PostcodeMedianPrice"> | string
    median?: IntWithAggregatesFilter<"PostcodeMedianPrice"> | number
  }

  export type ContactSubmissionWhereInput = {
    AND?: ContactSubmissionWhereInput | ContactSubmissionWhereInput[]
    OR?: ContactSubmissionWhereInput[]
    NOT?: ContactSubmissionWhereInput | ContactSubmissionWhereInput[]
    id?: IntFilter<"ContactSubmission"> | number
    name?: StringFilter<"ContactSubmission"> | string
    email?: StringFilter<"ContactSubmission"> | string
    phone?: StringFilter<"ContactSubmission"> | string
    message?: StringFilter<"ContactSubmission"> | string
    createdAt?: DateTimeFilter<"ContactSubmission"> | Date | string
  }

  export type ContactSubmissionOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    message?: SortOrder
    createdAt?: SortOrder
  }

  export type ContactSubmissionWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: ContactSubmissionWhereInput | ContactSubmissionWhereInput[]
    OR?: ContactSubmissionWhereInput[]
    NOT?: ContactSubmissionWhereInput | ContactSubmissionWhereInput[]
    name?: StringFilter<"ContactSubmission"> | string
    email?: StringFilter<"ContactSubmission"> | string
    phone?: StringFilter<"ContactSubmission"> | string
    message?: StringFilter<"ContactSubmission"> | string
    createdAt?: DateTimeFilter<"ContactSubmission"> | Date | string
  }, "id">

  export type ContactSubmissionOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    message?: SortOrder
    createdAt?: SortOrder
    _count?: ContactSubmissionCountOrderByAggregateInput
    _avg?: ContactSubmissionAvgOrderByAggregateInput
    _max?: ContactSubmissionMaxOrderByAggregateInput
    _min?: ContactSubmissionMinOrderByAggregateInput
    _sum?: ContactSubmissionSumOrderByAggregateInput
  }

  export type ContactSubmissionScalarWhereWithAggregatesInput = {
    AND?: ContactSubmissionScalarWhereWithAggregatesInput | ContactSubmissionScalarWhereWithAggregatesInput[]
    OR?: ContactSubmissionScalarWhereWithAggregatesInput[]
    NOT?: ContactSubmissionScalarWhereWithAggregatesInput | ContactSubmissionScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"ContactSubmission"> | number
    name?: StringWithAggregatesFilter<"ContactSubmission"> | string
    email?: StringWithAggregatesFilter<"ContactSubmission"> | string
    phone?: StringWithAggregatesFilter<"ContactSubmission"> | string
    message?: StringWithAggregatesFilter<"ContactSubmission"> | string
    createdAt?: DateTimeWithAggregatesFilter<"ContactSubmission"> | Date | string
  }

  export type CMARequestWhereInput = {
    AND?: CMARequestWhereInput | CMARequestWhereInput[]
    OR?: CMARequestWhereInput[]
    NOT?: CMARequestWhereInput | CMARequestWhereInput[]
    id?: IntFilter<"CMARequest"> | number
    email?: StringFilter<"CMARequest"> | string
    address?: StringFilter<"CMARequest"> | string
    postcode?: StringFilter<"CMARequest"> | string
    createdAt?: DateTimeFilter<"CMARequest"> | Date | string
  }

  export type CMARequestOrderByWithRelationInput = {
    id?: SortOrder
    email?: SortOrder
    address?: SortOrder
    postcode?: SortOrder
    createdAt?: SortOrder
  }

  export type CMARequestWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: CMARequestWhereInput | CMARequestWhereInput[]
    OR?: CMARequestWhereInput[]
    NOT?: CMARequestWhereInput | CMARequestWhereInput[]
    email?: StringFilter<"CMARequest"> | string
    address?: StringFilter<"CMARequest"> | string
    postcode?: StringFilter<"CMARequest"> | string
    createdAt?: DateTimeFilter<"CMARequest"> | Date | string
  }, "id">

  export type CMARequestOrderByWithAggregationInput = {
    id?: SortOrder
    email?: SortOrder
    address?: SortOrder
    postcode?: SortOrder
    createdAt?: SortOrder
    _count?: CMARequestCountOrderByAggregateInput
    _avg?: CMARequestAvgOrderByAggregateInput
    _max?: CMARequestMaxOrderByAggregateInput
    _min?: CMARequestMinOrderByAggregateInput
    _sum?: CMARequestSumOrderByAggregateInput
  }

  export type CMARequestScalarWhereWithAggregatesInput = {
    AND?: CMARequestScalarWhereWithAggregatesInput | CMARequestScalarWhereWithAggregatesInput[]
    OR?: CMARequestScalarWhereWithAggregatesInput[]
    NOT?: CMARequestScalarWhereWithAggregatesInput | CMARequestScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"CMARequest"> | number
    email?: StringWithAggregatesFilter<"CMARequest"> | string
    address?: StringWithAggregatesFilter<"CMARequest"> | string
    postcode?: StringWithAggregatesFilter<"CMARequest"> | string
    createdAt?: DateTimeWithAggregatesFilter<"CMARequest"> | Date | string
  }

  export type PostcodeMedianPriceCreateInput = {
    postcode: string
    median: number
  }

  export type PostcodeMedianPriceUncheckedCreateInput = {
    id?: number
    postcode: string
    median: number
  }

  export type PostcodeMedianPriceUpdateInput = {
    postcode?: StringFieldUpdateOperationsInput | string
    median?: IntFieldUpdateOperationsInput | number
  }

  export type PostcodeMedianPriceUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    postcode?: StringFieldUpdateOperationsInput | string
    median?: IntFieldUpdateOperationsInput | number
  }

  export type PostcodeMedianPriceCreateManyInput = {
    id?: number
    postcode: string
    median: number
  }

  export type PostcodeMedianPriceUpdateManyMutationInput = {
    postcode?: StringFieldUpdateOperationsInput | string
    median?: IntFieldUpdateOperationsInput | number
  }

  export type PostcodeMedianPriceUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    postcode?: StringFieldUpdateOperationsInput | string
    median?: IntFieldUpdateOperationsInput | number
  }

  export type ContactSubmissionCreateInput = {
    name: string
    email: string
    phone: string
    message: string
    createdAt?: Date | string
  }

  export type ContactSubmissionUncheckedCreateInput = {
    id?: number
    name: string
    email: string
    phone: string
    message: string
    createdAt?: Date | string
  }

  export type ContactSubmissionUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ContactSubmissionUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ContactSubmissionCreateManyInput = {
    id?: number
    name: string
    email: string
    phone: string
    message: string
    createdAt?: Date | string
  }

  export type ContactSubmissionUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ContactSubmissionUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CMARequestCreateInput = {
    email: string
    address: string
    postcode: string
    createdAt?: Date | string
  }

  export type CMARequestUncheckedCreateInput = {
    id?: number
    email: string
    address: string
    postcode: string
    createdAt?: Date | string
  }

  export type CMARequestUpdateInput = {
    email?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    postcode?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CMARequestUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    postcode?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CMARequestCreateManyInput = {
    id?: number
    email: string
    address: string
    postcode: string
    createdAt?: Date | string
  }

  export type CMARequestUpdateManyMutationInput = {
    email?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    postcode?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CMARequestUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    postcode?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type PostcodeMedianPriceCountOrderByAggregateInput = {
    id?: SortOrder
    postcode?: SortOrder
    median?: SortOrder
  }

  export type PostcodeMedianPriceAvgOrderByAggregateInput = {
    id?: SortOrder
    median?: SortOrder
  }

  export type PostcodeMedianPriceMaxOrderByAggregateInput = {
    id?: SortOrder
    postcode?: SortOrder
    median?: SortOrder
  }

  export type PostcodeMedianPriceMinOrderByAggregateInput = {
    id?: SortOrder
    postcode?: SortOrder
    median?: SortOrder
  }

  export type PostcodeMedianPriceSumOrderByAggregateInput = {
    id?: SortOrder
    median?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type ContactSubmissionCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    message?: SortOrder
    createdAt?: SortOrder
  }

  export type ContactSubmissionAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type ContactSubmissionMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    message?: SortOrder
    createdAt?: SortOrder
  }

  export type ContactSubmissionMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    message?: SortOrder
    createdAt?: SortOrder
  }

  export type ContactSubmissionSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type CMARequestCountOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    address?: SortOrder
    postcode?: SortOrder
    createdAt?: SortOrder
  }

  export type CMARequestAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type CMARequestMaxOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    address?: SortOrder
    postcode?: SortOrder
    createdAt?: SortOrder
  }

  export type CMARequestMinOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    address?: SortOrder
    postcode?: SortOrder
    createdAt?: SortOrder
  }

  export type CMARequestSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}